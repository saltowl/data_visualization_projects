{"version":3,"sources":["components/Error/Error.js","components/BarChart/BarChart.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Error","props","className","message","BarChart","state","linearScale","xScale","yScale","dates","GDP","error","getData","bind","updateChart","updateScales","handleMouseOverBar","handleMouseOutBar","this","d3","then","data","map","item","setState","domain","range","height","rawDates","d","Date","barWidth","width","length","catch","margin","scaledGDP","viz","selectAll","transition","duration","animDuration","attr","i","select","call","scale","xMax","setMonth","getMonth","e","tooltip","bar","target","gdp","parseFloat","date","bounds","getBoundingClientRect","left","x","baseVal","value","top","y","style","html","toFixed","replace","bars","key","onMouseOver","onMouseOut","id","ref","transform","href","rel","React","Component","defaultProps","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69bdc46b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Error.css';\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className='Error'>\r\n            <div>{ props.message }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;\r\n","import React from 'react';\r\nimport './BarChart.css';\r\nimport * as d3 from 'd3';\r\nimport Error from '../Error/Error';\r\n\r\nclass BarChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            linearScale: null,\r\n            xScale: null,\r\n            yScale: null,\r\n            dates: null,\r\n            GDP: null,\r\n            error: null\r\n        };\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.updateChart = this.updateChart.bind(this);\r\n        this.updateScales = this.updateScales.bind(this);\r\n        this.handleMouseOverBar = this.handleMouseOverBar.bind(this);\r\n        this.handleMouseOutBar = this.handleMouseOutBar.bind(this);\r\n\r\n        this.getData();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateChart();\r\n    }\r\n\r\n    getData() {\r\n        d3.json('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json')\r\n            .then((data) => {\r\n                const GDP = data.data.map(item => item[1]);\r\n\r\n                this.setState({\r\n                    linearScale: d3.scaleLinear()\r\n                        .domain([0, d3.max(GDP) + 1000])\r\n                        .range([0, this.props.height]),\r\n                    rawDates: data.data.map(d => d[0]),\r\n                    dates: data.data.map(d => new Date(d[0])),\r\n                    GDP,\r\n                    barWidth: this.props.width / GDP.length,\r\n                });\r\n\r\n                this.updateChart();\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error });\r\n            });\r\n    }\r\n\r\n    updateChart() {\r\n        if (this.state.error || !this.state.GDP) return;\r\n\r\n        const { dates, GDP, barWidth, rawDates } = this.state;\r\n        const { height, margin } = this.props;\r\n\r\n        this.updateScales();\r\n\r\n        const scaledGDP = GDP.map(item => this.state.linearScale(item));\r\n\r\n        d3.select(this.viz)\r\n            .selectAll('.bar')\r\n            .data(scaledGDP)\r\n            .transition().duration(this.props.animDuration)\r\n            .attr('x', (d, i) => this.state.xScale(dates[i]) + margin)\r\n            .attr('y', (d, i) => height - d)\r\n            .attr('width', barWidth)\r\n            .attr('height', d => d)\r\n            .attr('data-date', (d, i) => rawDates[i])\r\n            .attr('data-gdp', (d, i) => GDP[i]);\r\n\r\n        d3.select(this.viz)\r\n            .select('#x-axis')\r\n            .call(d3.axisBottom().scale(this.state.xScale));\r\n\r\n        d3.select(this.viz)\r\n            .select('#y-axis')\r\n            .call(d3.axisLeft(this.state.yScale));\r\n\r\n    }\r\n\r\n    updateScales() {\r\n        const { dates, GDP } = this.state;\r\n        const { width, height } = this.props;\r\n\r\n        let xMax = new Date(d3.max(dates));\r\n        xMax.setMonth(xMax.getMonth() + 3);\r\n\r\n        const xScale = d3.scaleTime()\r\n            .domain([d3.min(dates), xMax])\r\n            .range([0, width]);\r\n\r\n        const yScale = d3.scaleLinear()\r\n            .domain([0, d3.max(GDP) + 1000])\r\n            .range([height, 0]);\r\n\r\n        this.setState({xScale, yScale});\r\n    }\r\n\r\n    handleMouseOverBar(e) {\r\n        const tooltip = d3.select('#tooltip');\r\n        const bar = d3.select(e.target);\r\n        const gdp = parseFloat(bar.attr('data-gdp'));\r\n        const date = bar.attr('data-date');\r\n        const bounds = this.viz.getBoundingClientRect();\r\n        const left = bounds.x + e.target.x.baseVal.value;\r\n        const top = bounds.y + bounds.height - 2 * this.props.margin;\r\n\r\n        tooltip.transition()\r\n            .duration(200)\r\n            .style('opacity', 1);\r\n\r\n        tooltip.html(`${ date } <br> $ ${ gdp.toFixed(1).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,') } Billion`)\r\n            .attr('data-date', date)\r\n            .style('left', `${ left + 10 }px`)\r\n            .style('top', `${ top }px`);\r\n    }\r\n\r\n    handleMouseOutBar(e) {\r\n        d3.select('#tooltip')\r\n            .transition()\r\n            .duration(200)\r\n            .style('opacity', 0);\r\n    }\r\n\r\n    render() {\r\n        const { error, GDP, barWidth } = this.state;\r\n        const { width, height, margin } = this.props;\r\n\r\n        const bars = GDP \r\n            ? GDP.map((d, i) => (<rect key={`bar${i}`} className='bar' \r\n                onMouseOver={ this.handleMouseOverBar } onMouseOut={ this.handleMouseOutBar } \r\n                y={ height } x={ margin + i * barWidth } />)) \r\n            : [];\r\n\r\n        return (\r\n            <div className='main'>\r\n                <div className='container'>\r\n                    { error \r\n                    ? <Error message={ error.message } /> \r\n                    : <div className='graph'>\r\n                        <div id='title'>United States GDP</div>\r\n                            <div id='tooltip' />\r\n                            <svg ref={ viz => (this.viz = viz) } width={ width + 100 } height={ height + margin }>\r\n                                <text transform={ 'rotate(-90)' } x={ -200 } y={ 80 }>\r\n                                    Gross Domestic Product\r\n                                </text>\r\n                                <text x={ width - margin - 20 } y={ height + 50 }>\r\n                                    <a href='http://www.bea.gov/national/pdf/nipaguid.pdf' target='_blank' rel=\"noopener noreferrer\">\r\n                                        More Information...\r\n                                    </a>\r\n                                </text>\r\n                                <g id='x-axis' transform={ `translate(${margin}, ${height})` } />\r\n                                <g id='y-axis' transform={ `translate(${margin}, 0)` } />\r\n                                { bars }\r\n                            </svg>\r\n                        </div> \r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nBarChart.defaultProps = {\r\n    animDuration: 800,\r\n    height: 400,\r\n    width: 800,\r\n    margin: 60\r\n};\r\n\r\nexport default BarChart;","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport BarChart from '../BarChart/BarChart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/bar-chart\" component={BarChart} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}